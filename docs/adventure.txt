-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package adventure
@version 0.1.0.0


-- | Ten moduł zawiera definicje typów związanych z pokojami i
--   przemiszczaniem się między nimi. Znajdują się tu również funkcje
--   odpowiedzialne za parsowanie pokoi do gry.
module RoomParser

-- | Alias dla nazwy pokoju.
type RoomName = Text

-- | Alias dla nazwy przedmiotu.
type ItemName = Text

-- | Alias dla opisu pozycji przedmiotu.
type PositionDesc = Text

-- | Typ do zarządzania przedmiotami w pokoju. Składa się z mapy, której
--   kluczami są nazwy przedmiotów, a wartościami ich opisy.
type ItemsInRoom = Map ItemName PositionDesc

-- | Typ do zarządzania wyjściami z pokoju. Jest to mapa, której kluczami
--   są kierunki typu <a>Direction</a>, a wartościami nazwy pokojów typu
--   <a>RoomName</a>.
type ExitsFromRoom = Map Direction RoomName

-- | Typ danych reprezentujący kierunki świata, wykorzystywany do
--   oznaczania wyjść z pokoju.
data Direction
North :: Direction
East :: Direction
South :: Direction
West :: Direction

-- | Typ danych reprezentujący pokój.
data Room
Room :: RoomName -> Text -> ItemsInRoom -> ExitsFromRoom -> Room

-- | nazwa pokoju
[name] :: Room -> RoomName

-- | opis danego miejsca
[description] :: Room -> Text

-- | zbiór przedmiotów znajdującyh się w pokoju
[items] :: Room -> ItemsInRoom

-- | zbiór możliwych wyjść z pokoju
[exits] :: Room -> ExitsFromRoom

-- | Funkcja parsująca wszystkie pokoje do gry. Plik definiujący pokoje
--   powinien znajdować się w foldere gameFiles i mieć nazwę rooms.json.
parseGameRomms :: IO (Either String (Map RoomName Room))

-- | Funkcja zwraca zagubiony pokój. Podczas gry oznacza to, że świat gry
--   był źle zdefiniowany i gracz wszedł do pokoju który nie został
--   zdefiniowany.
lostRoom :: Room

-- | Funkcja zwraca nazwę pokoju od którego rozpoczynana jest gra.
parseStartRoom :: IO RoomName
instance GHC.Generics.Generic RoomParser.Room
instance GHC.Generics.Generic RoomParser.Direction
instance GHC.Classes.Eq RoomParser.Direction
instance GHC.Show.Show RoomParser.Direction
instance GHC.Show.Show RoomParser.Room
instance Data.Aeson.Types.FromJSON.FromJSON RoomParser.Room
instance Data.Aeson.Types.ToJSON.ToJSON RoomParser.Room
instance GHC.Classes.Ord RoomParser.Direction
instance Data.Aeson.Types.FromJSON.FromJSON RoomParser.Direction
instance Data.Aeson.Types.ToJSON.ToJSON RoomParser.Direction
instance Data.Aeson.Types.FromJSON.FromJSONKey RoomParser.Direction
instance Data.Aeson.Types.ToJSON.ToJSONKey RoomParser.Direction


-- | Ten moduł zawiera definicje typu stanu gry oraz funkcji z tym
--   związanych. Zawiera również funkcje odpowiadające za zapis i odczyt
--   stanu gry z pliku.
module GameState

-- | Alias dla skrócenia zapisu.
type GameIO a = StateT AdventureGame IO a

-- | Typ reprezentujący stan gry
data AdventureGame
AdventureGame :: World -> [ItemName] -> RoomName -> AdventureGame

-- | mapa zawierające wszystkie pokoje, czyli świat gry
[gameWorld] :: AdventureGame -> World

-- | lista zawierająca posiadane przedmioty
[inventory] :: AdventureGame -> [ItemName]

-- | nazwa pokoju w którym aktualnie znajduje się gracz
[currentRoomName] :: AdventureGame -> RoomName

-- | Alias dla mapy pokojów, czyli świata gry.
type World = Map RoomName Room

-- | Funkcja koduje i zapisuje stan gry typu <a>AdventureGame</a> do
--   podanego pliku. Plik zostaje zapisany do folderu gameFiles.
saveStateToFile :: FilePath -> AdventureGame -> IO ()

-- | Funkcja odczytuje stan gry typu <a>AdventureGame</a> z podanego pliku.
--   Plik powinien się znajdować w folderze gameFiles.
loadStateFromFile :: FilePath -> IO (Either String AdventureGame)

-- | Funkcja próbuje załadować stan gry z podanego pliku za pomocą funkcji
--   <a>loadStateFromFile</a>. Jeśli stan gry zostanie poprawnie
--   sparsowany, jest on ustawiany jako aktualny. Wpp wypisywany jest błąd.
loadState :: FilePath -> GameIO ()

-- | Funkcja zapisuje stan gry za pomocą funkcji <a>saveStateToFile</a>.
saveState :: FilePath -> GameIO ()

-- | Funkcja zwracająca aktualny pokój. Jeśli pokój nie zostanie
--   odnaleziony poprzez nazwę, zwracany jest "zgubiony pokój".
getCurrentRoom :: AdventureGame -> Room

-- | Funkcja zwracająca aktualny pokój w monadzie Maybe. Jeśli pokój nie
--   zostanie odnaleziony poprzez nazwę, zwracane jest Nothing
getCurrentRoom' :: AdventureGame -> Maybe Room

-- | Funkcja restartuje grę ustawiając nowy stan gry.
restartGame :: GameIO Bool

-- | Funkcja wyświetla zawartość podanego pliku znajdującego się w folderze
--   gameFiles.
showGameFile :: FilePath -> IO ()

-- | Funkcja wyświetla plik zawierający instrukcję pomocy dla gracza. Plik
--   powinien się znajdować w folderze gameFiles i mieć nazwę help.txt.
showHelp :: GameIO Bool

-- | Funkcja wyświetla plik zawierający powitanie dla gracza. Plik powinien
--   się znajdować w folderze gameFiles i mieć nazwę welcome.txt.
showWelcome :: IO ()

-- | Funkcja wyświetla pokój o podanej nazwie. Jest używana do wyświetlania
--   opisu startowego pokoju.
showFirstRoom :: RoomName -> World -> IO ()

-- | Funkcja <a>processActionWithMessage</a> służy do wypisywania podanej
--   wiadomości.
processActionWithMessage :: String -> GameIO ()

-- | Funkcja <a>acceptAction</a> służy do wypisywania wiadomości o
--   powodzeniu wykonania akcji.
acceptAction :: GameIO ()

-- | Funkcja <a>rejectAction</a> służy do wypisywania wiadomości o
--   niepowodzeniu wykonania akcji.
rejectAction :: GameIO ()
instance GHC.Generics.Generic GameState.AdventureGame
instance Data.Aeson.Types.ToJSON.ToJSON GameState.AdventureGame
instance Data.Aeson.Types.FromJSON.FromJSON GameState.AdventureGame


-- | Ten moduł zawiera funkcje związane z przemieszczaniem się między
--   pokojami.
module Moving

-- | Funkcja przyjmuje nazwę pokoju i wyszukuje go w typie danych gry.
--   Zwraca Just <a>Room</a> lub <a>Nothing</a> (w przypadku nie
--   znalezienia).
getRoom :: RoomName -> AdventureGame -> Maybe Room

-- | Funkcja przyjmuje nazwę pokoju i podmienia ją jako nazwę aktualnego
--   pokoju w AdventureGame.
changeRoom :: RoomName -> AdventureGame -> AdventureGame

-- | Funkcja sprawdza czy istenieje z pokoju wyjście w zadanym kierunku,
--   jeśli wyjście istnieje to zostaje zwrócona nazwa pokoju w monadzie
--   <a>Maybe</a>
checkExit :: Direction -> AdventureGame -> Maybe RoomName

-- | Funkcja przyjmuje kierunek typu <a>Direction</a>. Jeśli wykonanie
--   ruchu w danym kierunku jest możliwe stan gry zostaje zmodyfikowany
--   poprzez wykonanie ruchu. W przeciwnym przypadki wypisywany jest
--   odpowiedni komunikat.
move :: Direction -> GameIO Bool

-- | Funkcja wypisuje na ekran pokój w którym aktualnie znajduje się gracz.
showCurrentRoom :: GameIO ()


-- | Ten moduł zawiera definicje funkcji związanych z podnoszeniem i
--   odkładaniem przedmiotów w pokoju. Znajdują się tu funkcje
--   odpowiadające zarówno za zmianę pokoi jak i zmianę posiadanych
--   przedmiotów.
module Items

-- | Funkcja przyjmuje nazwę przedmiotu i dodaje przedmiot do inwentarza.
addItemToInventory :: ItemName -> AdventureGame -> AdventureGame

-- | Funkcja przyjmuje nazwę przedmiotu i usuwa przedmiot do inwentarza.
removeItemFromInventory :: ItemName -> AdventureGame -> AdventureGame

-- | Funkcja przyjmuje nazwę przedmiotu i sprawdza czy znajduje się on w
--   inwentarzu.
itemPossesion :: ItemName -> AdventureGame -> Bool

-- | Funkcja przyjmuje nazwę przedmiotu i sprawdza czy znajduje się on w
--   aktualnym pokoju gracza.
lookForItemInRoom :: ItemName -> AdventureGame -> Maybe Bool

-- | Funkcja przyjmuje nazwę przedmiotu oraz pokój i zmienia mapę pokojów
--   poprzez usunięcie przedmiotu z pokoju funkcją
--   <a>takeItemChangeRoom</a>.
takeItemChangeWorld :: ItemName -> Room -> World -> World

-- | Funkcja przyjmuje nazwę przedmiotu oraz pokój. Zwraca pokój z
--   usuniętym przedmiotem.
takeItemChangeRoom :: ItemName -> Room -> Room

-- | Funkcja przyjmuje nazwę przedmiotu i zmienia stan gry poprzez
--   usunięcie go z pokoju.
takeItemChangeGame :: ItemName -> AdventureGame -> AdventureGame

-- | Funkcja przyjuje nazwę przedmiotu, sprawda czy jest on w aktualnym
--   pokoju. Jeśli przedmiot jest dostępny stan gry zostaje zmodyfikowany
--   poprzez zabranie przedmiotu z pokoju i umieszczenie go w inwertarzu. W
--   przeciwnym przypadku jest wypisywany odpowiedni komunikat stan gry nie
--   zostaje zmodyfikowany.
takeItem :: ItemName -> GameIO Bool

-- | Funkcja przyjmuje nazwę przedmiotu i zmienia stan gry poprzez dodanie
--   go do pokoju.
putItemChangeGame :: ItemName -> AdventureGame -> AdventureGame

-- | Funkcja przyjmuje nazwę przedmiotu oraz pokój i zmienia mapę pokojów
--   poprzez dodanie przedmiotu z pokoju funkcją <a>putItemChangeRoom</a>.
putItemChangeWorld :: ItemName -> Room -> World -> World

-- | Funkcja przyjmuje nazwę przedmiotu oraz pokój. Zwraca pokój z dodanym
--   przedmiotem i domyślym opisem lokalizacji.
putItemChangeRoom :: ItemName -> Room -> Room

-- | Funkcja przyjuje nazwę przedmiotu, sprawda czy jest on w inwentarzu.
--   Jeśli przedmiot jest dostępny stan gry zostaje zmodyfikowany poprzez
--   położenie przedmiotu w pokoju. W przeciwnym przypadku jest wypisywany
--   odpowiedni komunikat stan gry nie zostaje zmodyfikowany.
putItem :: ItemName -> GameIO Bool

-- | Funkcja wypisuje na konsolę aktualny stan posiadanych przedmiotów.
showInventory :: GameIO Bool


-- | Ten moduł zawiera definicje funkcji obsługującyh akcje związane z
--   wykorzystaniem przedmiotów. Dany przedmiot może być użyty tylko jeśli
--   została dla niego zdefiniowana akcja typu <a>GameAction</a> o nazwie
--   <a>ActionName</a>.
module GameActions

-- | Typ do zarządzania akcjami dla przedmiotów. Jest to mapa, której
--   kluczami są typy <a>ActionName</a> a wartościami 'GameAction.
type ActionsMap = Map ActionName GameAction

-- | Alias dla nazwy akcji.
type ActionName = Text

-- | Alias dla wiadomości w przypadku sukcesu akcji.
type ActionMessage = String

-- | Alias dla wejścia od użytkownika.
type UserActionInput = Text

-- | Typ danych reprezentujący rodzaje akcji związanych z przedmiotami.
data ActionType

-- | dodanie przedmiotu
AddItem :: ItemName -> ActionType

-- | usunięcie przedmiotu
RemoveItem :: ItemName -> ActionType

-- | zamienienie przedmiotu
ReplaceItem :: ItemName -> ItemName -> ActionType

-- | Typ danych reprezentujący rodzaje wyników akcji związanych z
--   przedmiotami.
data ActionResult

-- | zmiana aktualnego pokoju na inny
ChangeCurrentRoom :: RoomName -> ActionResult

-- | zmiana posiadanych przedmiotów
ChangeInventory :: ActionType -> ActionResult

-- | zmiana przedmiotów znajdującyh się w aktualnym pokoju
ChangeRoomInventory :: ActionType -> ActionResult

-- | brak zmiany świata gry
DoNothing :: ActionResult

-- | Typ danych reprezentujący warunki pomyślnego wykonania akcji.
data ActionConditions
ActionConditions :: RoomName -> [ItemName] -> ActionConditions

-- | nazwa pokoju w którym akcja musi się odbyć
[roomName] :: ActionConditions -> RoomName

-- | lista przedmiotów znajdujących się w aktualnym pokoju
[itemsInRoom] :: ActionConditions -> [ItemName]

-- | Typ danych reprezentujący akcję związaną z przedmiotem.
data GameAction
GameAction :: ItemName -> ActionMessage -> ActionConditions -> ActionResult -> GameAction

-- | nazwa przedmiotu którego dotyczy akcja
[itemName] :: GameAction -> ItemName

-- | wiadomość wyświetlania po pozytywnym wykonaniu akcji
[message] :: GameAction -> ActionMessage

-- | warunki niezbędne do pozytywnego wykonania akcji
[conditions] :: GameAction -> ActionConditions

-- | wynik działania akcji
[actionResult] :: GameAction -> ActionResult

-- | Funkcja przyjmuje wynik akcji <a>ActionResult</a> i w zależności od
--   jego typu wywłuje odpowiednie funckje zmieniające stan gry.
executeActionResult :: ActionResult -> AdventureGame -> AdventureGame

-- | Funkcja przyjmuje pokój i listę przedmiotów. Zwraca True jeśli
--   wszystkie przedmioty z listy znajdują się w pokoju. Wpp zwraca False.
doesRoomContainItems :: Room -> [ItemName] -> Bool

-- | Funkcja przyjmuje warunki typu <a>ActionConditions</a> i sprawdza, czy
--   wszystkie warunki do wykonania akcji są spełnione.
checkConditions :: ActionConditions -> AdventureGame -> Bool

-- | Funkcja przyjmuje dane wejściowe od użytkownika, nazwę przedmiotu.
--   Sprawdza czy akcja może zostać wykonana, to znaczy czy dany przedmiot
--   jest w posiadaniu, czy istnieje akcja o danej nazwie i czy wszystkie
--   potrzebne do niej warunki są spełnione. Zwraca True lub False.
canActionBeExecuted :: UserActionInput -> ItemName -> ActionsMap -> AdventureGame -> Bool

-- | Funkcja wyciąga z mapy <a>GameAction</a> dla podanej nazwy akcji.
--   Uwaga: tą funkcę można wywoływać tylko po sprawdzeniu, że w mapie
--   znajduje się akcja o podanej nazwie.
getActionResult :: ActionName -> ActionsMap -> GameAction

-- | Funkcja wykonuje daną akcję poprzez modyfikację stanu gry. Funkcja
--   wypisuje stosowną wiadomość o sukcesie lub porażce.
runAction :: ActionName -> ActionsMap -> GameIO ()

-- | Funkcja przyjmuje wejście od użytkownika, nazwę przedmiotu i mapę
--   akcji. Akcja zostaje sprawdzona funkcją <a>canActionBeExecuted</a> i
--   ewentualnie wykonana funkcją <a>runAction</a>.
useItem :: UserActionInput -> ItemName -> ActionsMap -> GameIO Bool

-- | Funkca parsuje flik z akcjami. Plik powinien się znajodwać w folderze
--   gameFiles i mieć nazwę actions.
loadMapFromFile :: IO (Either String (Map ActionName GameAction))

-- | Funkcja próbuje sparsować plik z akcjami. Zwraca sparsowaną mapę akcji
--   lub wypisuje wiadomość o porażce i zwraca pustą mapę.
parseActions :: IO ActionsMap

-- | Funkcja sprawdza czy dana akcja z wejścia użytkownika znajduje się w
--   zbiorze wszystkich akcji.
checkInputActionsMap :: UserActionInput -> ActionsMap -> Bool
instance GHC.Generics.Generic GameActions.GameAction
instance GHC.Generics.Generic GameActions.ActionConditions
instance GHC.Generics.Generic GameActions.ActionResult
instance GHC.Generics.Generic GameActions.ActionType
instance Data.Aeson.Types.FromJSON.FromJSON GameActions.GameAction
instance Data.Aeson.Types.ToJSON.ToJSON GameActions.GameAction
instance Data.Aeson.Types.FromJSON.FromJSON GameActions.ActionConditions
instance Data.Aeson.Types.ToJSON.ToJSON GameActions.ActionConditions
instance Data.Aeson.Types.FromJSON.FromJSON GameActions.ActionResult
instance Data.Aeson.Types.ToJSON.ToJSON GameActions.ActionResult
instance Data.Aeson.Types.FromJSON.FromJSON GameActions.ActionType
instance Data.Aeson.Types.ToJSON.ToJSON GameActions.ActionType


-- | W module znajdują się funkcje związane z parsowaniem tekstu od
--   użytkownika. Jest tu deklaracja typu danych <a>Action</a>, który
--   reprezentuje obsługiwane przez program komendy. Dane wpisywana przez
--   użytkownika są parsowane do odpowiednich akcji. Moduł zawiera również
--   obsługiwane synonimy bazowych komend. Dane są przetwarzane w formacie
--   Text.
module CommandParserText

-- | Typ danych reprezenujący akcje obsługiwane przez program
data Action

-- | akcja przemieszczenia się między pokojami
Move :: Direction -> Action

-- | akcja zabrania przedmiotu
Take :: ItemName -> Action

-- | akcja odłożenia przedmiotu
Put :: ItemName -> Action

-- | wypisanie na konsolę informacji pomocy
Help :: Action

-- | funkcja restartująca stan gry
Restart :: Action

-- | zapisanie aktualnego stanu gry do podanego pliku
SaveState :: String -> Action

-- | wczytanie zapisanego stanu gry z podanego pliku
Continue :: String -> Action

-- | wyjście z programu
Quit :: Action

-- | wypisanie posiadanych przedmiotów
Inventory :: Action

-- | wypisanie opisu pokoju w którym gracz się znajduje
Look :: Action

-- | użycie przedmiotu o danej nazwie w podany sposób
Use :: ItemName -> UserActionInput -> Action

-- | Akceptowalne synonimy komendy "go".
goSynonyms :: [Text]

-- | Akceptowalne synonimy komendy "take".
takeSynonyms :: [Text]

-- | Akceptowalne synonimy komendy "put".
putSynonyms :: [Text]

-- | Akceptowalne synonimy komendy "inventory".
inventorySynonyms :: [Text]

-- | Funkcja <a>findAction</a> przyjmuje tablicę wyrazów i próbuje
--   dopasować pierwszy wyraz do odpowiedniej komendy (oprócz komendy
--   <a>Use</a>). Jeśli nastąpi dopasowanie zwracana jest opakowana
--   odpowiednia akcja, w razie potrzeby z jej argumentem. Jeśli nie
--   zajdzie dopasowanie zwracane jest <a>Nothing</a>.
findAction :: [Text] -> Maybe Action

-- | Funkcja <a>wordParser</a> parsuje kolejne litery słowa i zamiena je na
--   lowercase. Funckja korzysta z parsera importowanego z modułu
--   <a>Text</a>.
wordParser :: Parser Text

-- | Funkcja parsuje wejście rozdzielając dane na podstawie spacji, aby
--   uzyskać osobne słowa z polecenia. Każde słowo jest parsowane przez
--   funckję <a>wordParser</a>.
inputParser :: Parser [Text]

-- | Funkcja parsuje wejście za pomocą <a>inputParser</a> oraz próbuje
--   znaleźć odpowiednią akcję dzięki funkcji <a>findAction</a>.
commandParser :: Parser Action

-- | Funkcja parsuje wejście poprzez próbę dopasowania go do komend
--   znajdujących się w zbiorze typu <a>ActionsMap</a>. Jeśli dopasowanie
--   się powiedzie zwracana jest opakowana akcja <a>Use</a> z odpowiednimi
--   argumentami. W przeciwnym przypadku zwracane jest <a>Nothing</a>.
parseActionFromMap :: Text -> ActionsMap -> Maybe Action

-- | Funkcja przyjmuje zbiór akcji typu <a>ActionsMap</a> i wejście od
--   użytkownika. Wejście jest parsowane z użyciem funkcji
--   <a>commandParser</a>. Jeśli nie zostanie prawidłowo sparsowane to
--   wejście może zostać dopasowane do akcji ze zbioru typu
--   <a>ActionsMap</a>. Funcja zwraca Right <a>Action</a> jeśli udało się
--   dopasować akcję, lub Left <a>String</a> jeśli wystąpił błąd lub nie
--   nastąpiło żadne dopasowanie.
parseCommand :: ActionsMap -> Text -> Either ParseError Action

-- | Funkcja przyjmuje dane Text i próbuje dopasować je do typu
--   <a>Direction</a>. Zwracane jest Just <a>Direction</a> lub Nothing,
--   jeśli nie nastąpiło przypisanie.
parseDirection :: Text -> Maybe Direction
instance GHC.Show.Show CommandParserText.Action


-- | Ten moduł zawiera definicje funkcji służących do prowadzenia gry -
--   parsowania i wykonywania akcji od gracza.
module GameExe

-- | Funkcja <a>readCommand</a> parsuje wejście od użytkownika. W przypadku
--   sukcesu zwracana jest odpowiednia akcja.
readCommand :: ActionsMap -> GameIO (Either ParseError Action)

-- | Funkcja <a>mainLoop</a> pełni rolę pętli, która odpowiada za ciągłe
--   przetwarzanie i wykonywanie komend. Za każdym razem sprawdzany jest
--   wynik wykoniania akcji, który informuje o tym, czy gra powinna być
--   kontynuowana.
mainLoop :: ActionsMap -> GameIO ()

-- | Funkcja <a>startGame</a> służy do rozpoczęcia gry. Ładowane i parsowne
--   są odpowiednie pliki, za pomocą funkcji <a>mainLoop</a> przetwarzane
--   są kolejne komendy.
startGame :: IO ()

-- | Funkcja <a>executeAction</a> służy wykonaniu danej akcji. W zwracanej
--   monadzie jest wartość Bool, która informuje czy gra powinna się toczyć
--   dalej, czy zakończyć.
executeAction :: ActionsMap -> Action -> GameIO Bool
